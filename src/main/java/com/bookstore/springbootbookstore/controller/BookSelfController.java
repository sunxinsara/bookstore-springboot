package com.bookstore.springbootbookstore.controller;

import com.bookstore.springbootbookstore.entity.BatchPostDTO;
import com.bookstore.springbootbookstore.entity.Book;
import com.bookstore.springbootbookstore.repository.BookRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

// curl http://localhost:8080/book/all
@Controller // This means that this class is a Controller
@RequestMapping(path="/book") // This means URL's start with /demo (after Application path)
public class BookSelfController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping
    public @ResponseBody Iterable<Book> getAllBooks() {
        // This returns a JSON or XML with the users
        return bookRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        Optional<Book> book = bookRepository.findById(Math.toIntExact(id));
        if (book.isPresent()) {
            return ResponseEntity.ok(book.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public @ResponseBody
    ResponseEntity<String> addNewBook(@RequestBody Book book){
        try {
            bookRepository.save(book);
            // 返回201 Created状态码和消息体
            return ResponseEntity.status(HttpStatus.CREATED).body("Saved");
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error状态码和错误消息
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving the book");
        }
    }

    @PutMapping
    public ResponseEntity<Book> updateBook(@RequestBody Book book) {
        try {
            // 检查书籍是否存在
            if (bookRepository.existsById(book.getId())) {
                // 更新书籍信息并获取更新后的实例
                Book updatedBook = bookRepository.save(book);
                // 返回成功响应和更新后的书籍数据
                return ResponseEntity.ok(updatedBook);
            } else {
                // 如果书籍不存在，返回404 Not Found状态码
                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error状态码
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteBook(@PathVariable int id) {
        try {
            // 检查书籍是否存在
            if (bookRepository.existsById(id)) {
                // 存在则删除
                bookRepository.deleteById(id);
                // 返回删除成功的消息
                return ResponseEntity.ok("Book deleted successfully");
            } else {
                // 如果书籍不存在，返回404 Not Found状态码
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book not found");
            }
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error状态码
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting the book");
        }
    }

    @PostMapping("/deleteBooks")
    @Transactional
    public ResponseEntity<String> deleteBooks(@RequestBody BatchPostDTO dto) {
        List<Integer> ids = dto.getIds();  // 从DTO获取ID列表
        try {
            // 检查所有书籍是否存在
            for (Integer id : ids) {
                if (!bookRepository.existsById(id)) {
                    // 如果任何一个书籍不存在，返回404 Not Found
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("One or more books not found");
                }
            }
            // 删除所有书籍
            bookRepository.deleteAllById(ids);
            return ResponseEntity.ok("Books deleted successfully");
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting books");
        }
    }
}


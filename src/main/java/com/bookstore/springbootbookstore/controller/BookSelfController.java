package com.bookstore.springbootbookstore.controller;

import com.bookstore.springbootbookstore.entity.Book;
import com.bookstore.springbootbookstore.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

// curl http://localhost:8080/book/all
// @Controller // This means that this class is a Controller
@RestController // combined with @Controller and @ResponseBody
@RequestMapping(path="/book") // This means URL's start with /demo (after Application path)
public class BookSelfController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Book> getAllBooks() {
        // This returns a JSON or XML with the users
        return bookRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        Optional<Book> book = bookRepository.findById(Math.toIntExact(id));
        if (book.isPresent()) {
            return ResponseEntity.ok(book.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping(path = "/add")
    public @ResponseBody
    ResponseEntity<String> addNewBook(@RequestBody Book book){
        try {
            bookRepository.save(book);
            // 返回201 Created状态码和消息体
            return ResponseEntity.status(HttpStatus.CREATED).body("Saved");
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error状态码和错误消息
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving the book");
        }
    }

    @PutMapping(path="/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable int id, @RequestBody Book bookDetails){
        // Optional<Book> is generally used for queries where at most one result is expected.
        // This is typically the case for searches based on unique identifiers, like an ID.
        Optional<Book> bookData = bookRepository.findById(id);

        if (bookData.isPresent()){
            Book updatedBook = bookData.get();
            updatedBook.setTitle(bookDetails.getTitle());
            updatedBook.setAuthor(bookDetails.getAuthor());
            updatedBook.setCategories(bookDetails.getCategories());
            updatedBook.setImage_url(bookDetails.getImage_url());
            bookRepository.save(updatedBook);
            return ResponseEntity.ok(updatedBook);
        }else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping(path="/{id}")
    public ResponseEntity<String> deleteBook(@PathVariable int id) {
        try {
            bookRepository.deleteById(id);
            return ResponseEntity.ok("Book deleted successfully");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting the book");
        }
    }

    @GetMapping(path="/title/{title}")
    public ResponseEntity<List<Book>> findByTitle(@PathVariable String title) {
        List<Book> books = bookRepository.findByTitle(title);
        if (!books.isEmpty()) {
            return ResponseEntity.ok(books);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    @GetMapping(path = "title/like/{title}")
    public ResponseEntity<List<Book>> findByTitleLikeIngoreCase(@PathVariable String title){
        List<Book> books = bookRepository.findByTitleContainingIgnoreCase(title);
        if (!books.isEmpty()) {
            return ResponseEntity.ok(books);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping(path="/author/{author}")
    public ResponseEntity<List<Book>> findByAuthor(@PathVariable String author) {
        List<Book> books = bookRepository.findByAuthor(author);
        if (!books.isEmpty()) {
            return ResponseEntity.ok(books);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping(path="/author/like/{author}")
    public ResponseEntity<List<Book>> findByAuthorLikeIgnoreCase(@PathVariable String author) {
        List<Book> books = bookRepository.findByAuthorContainingIgnoreCase(author);
        if (books.isEmpty()) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok(books);
        }
    }
}

package com.bookstore.springbootbookstore.controller;

import com.bookstore.springbootbookstore.entity.Book;
import com.bookstore.springbootbookstore.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

// curl http://localhost:8080/book/all
@Controller // This means that this class is a Controller
@RequestMapping(path="/book") // This means URL's start with /demo (after Application path)
public class BookSelfController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Book> getAllBooks() {
        // This returns a JSON or XML with the users
        return bookRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        Optional<Book> book = bookRepository.findById(Math.toIntExact(id));
        if (book.isPresent()) {
            return ResponseEntity.ok(book.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping(path = "/add")
    public @ResponseBody
    ResponseEntity<String> addNewBook(@RequestBody Book book){
        try {
            bookRepository.save(book);
            // 返回201 Created状态码和消息体
            return ResponseEntity.status(HttpStatus.CREATED).body("Saved");
        } catch (Exception e) {
            // 在发生异常时返回500 Internal Server Error状态码和错误消息
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving the book");
        }
    }

}
